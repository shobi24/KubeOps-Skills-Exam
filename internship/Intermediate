1.Assume we have an application that is designed as below. Our application stopped responding due to an extremely high number of clients in some circumstances.
-	We have tried scaling a number of API Gateway and Service A nodes but it didn’t help. What are the possible problems that lies in our system in which components and how to fix them?
Answer :
การจัดการทรัพย์กรณ์ในระบบมีการใช้งานเกินกว่าที่กำหนด โดยสามารถดูได้จากระบบ Monitor ตามช่วงเวลาที่เกิดปัญหาดังกล่าว และอาจจะแก้ปัญหาด้วยการใช้การสร้าง LoadBalance มาช่วยในการแก้ปัญหา ในกรณีที่มีการเกิดคอขวดในระบบ
Benefits of Load Balancing
•	Reduced downtime
•	Scalable
•	Redundancy
•	Flexibility
•	Efficiency

2.How do you keep the docker image smallest as possible?
Answer :
ใช้วิธี Docker Multi-stage Build คือ เทคนิคที่ช่วยให้เราสามารถ optimize ระยะเวลาในการ build image ซ้ำ แทนที่เราจะ มา build image ใหม่ทุกครั้ง ก็เปลี่ยนมาใช้การ copy image ที่เคย build ไปแล้วมาใช้กับ stage ใหม่แทน

3.What is the difference between overlay, bridge, host network in Docker? When to use each of them?
Answer :
host network จะรันอยู่บน host network เลย ซึ่งสามารถ full access ได้จาก host interface ดังนั้นจะเรียก containers พวกนี้ว่า open containers
Bridge Network คือการรัน container ที่สามารถเชื่อมต่อไปยัง host network หรือถ้าพูดง่ายๆก็คือ าสามารถออก internet ได้ โดยถ้าเราสั่งรัน container โดยไม่ระบุ network driver ก็จะได้ Bridge มาเป็น default network เสมอ ซึ่ง Bridge จะมี Subnet และ Gateway เป็นของตัวเอง
Overlay คือการรัน container ที่มีการคุยกันข้าม docker daemons (host network) ถ้ามีโจทย์แนวๆการทำ distributed network และต้องการให้ container สามารถคุยกันได้ บน host ที่ต่างกัน
		
4.How does the Kubernetes service talk to each other in the same cluster?
Answer :
kubelet ทำหน้าที่ลงทะเบียนให้ Node เข้าไปอยู่เป็นสมาชิกของ Kubernetes Cluster เป็น agent ที่รันอยู่ทุก Nodes ทำหน้าที่ติดต่อกับ API Server โดยจะคอยเฝ้าดูคำสั่งที่ผ่านเข้ามาและสั่งงานที่ได้มาภายใน Node ส่ง Events หรือ Pods Status ต่างๆ รวมไปถึงคอยรายงาน Resources Utilization

5.What’s different between L2, L4, and L7 Load balancers? When to use it?
Answer :
ที่เลเยอร์ 4 โหลดบาลานเซอร์สามารถมองเห็นข้อมูลเครือข่าย เช่น พอร์ตแอปพลิเคชันและโปรโตคอล (TCP/UDP) ตัวโหลดบาลานซ์ให้การรับส่งข้อมูลโดยการรวมข้อมูลเครือข่ายที่จำกัดนี้เข้ากับอัลกอริธึมการโหลดบาลานซ์ เช่น แบบวนรอบ และโดยการคำนวณเซิร์ฟเวอร์ปลายทางที่ดีที่สุดโดยพิจารณาจากการเชื่อมต่อที่น้อยที่สุดหรือเวลาตอบสนองของเซิร์ฟเวอร์
ที่เลเยอร์ 7 โหลดบาลานเซอร์มีการรับรู้แอปพลิเคชันและสามารถใช้ข้อมูลแอปพลิเคชันเพิ่มเติมนี้เพื่อทำการตัดสินใจเรื่องการจัดสรรภาระงานที่ซับซ้อนและมีข้อมูลมากขึ้น ด้วยโปรโตคอลเช่น HTTP ตัวโหลดบาลานซ์สามารถระบุเซสชันของไคลเอ็นต์โดยไม่ซ้ำกันตามคุกกี้และใช้ข้อมูลนี้เพื่อส่งคำขอของไคลเอ็นต์ทั้งหมดไปยังเซิร์ฟเวอร์เดียวกัน ความคงอยู่ของเซิร์ฟเวอร์นี้โดยใช้คุกกี้อาจขึ้นอยู่กับคุกกี้ของเซิร์ฟเวอร์หรือโดยการฉีดคุกกี้ที่ใช้งานอยู่ซึ่งมีการแทรกคุกกี้ตัวโหลดบาลานซ์ในการเชื่อมต่อ Free LoadMaster รวมการฉีดคุกกี้เป็นหนึ่งในหลาย ๆ วิธีเพื่อให้แน่ใจว่าเซสชันคงอยู่
ที่เลเยอร์ 2 โดยมีโปรโตคอลที่ทำงานเป็นกลไกสำคัญในการส่งผ่านข้อมูลไปยังเครือข่ายใดๆ บนอินเตอร์เน็ต คือ โปรโตคอล IP (Internet Protocol) นอกจากนี้ในชั้น Internetwork layer ยังมีโปรโตคอลทำงานอยู่ด้วยอีก 2 ชนิดคือ โปรโตคอล Internet Control Message Protocol (ICMP) และโปรโตคอล Address Resolution Protocol (ARP)
